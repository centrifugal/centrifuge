// Install protoc compiler https://github.com/google/protobuf/releases 
// Install gogofaster program:
// go get -u github.com/gogo/protobuf/protoc-gen-gogofaster
// protoc --proto_path=../../vendor:. --gogofaster_out=. control.proto
// Note that we use vendored gogoprotobuf path in example above.
syntax = "proto3";

package controlpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.equal_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;

enum MethodType {
    option (gogoproto.goproto_enum_prefix) = false;

    NODE = 0 [(gogoproto.enumvalue_customname) = "MethodTypeNode"];
    UNSUBSCRIBE = 1 [(gogoproto.enumvalue_customname) = "MethodTypeUnsubscribe"];
    DISCONNECT = 2 [(gogoproto.enumvalue_customname) = "MethodTypeDisconnect"];
    SHUTDOWN = 3 [(gogoproto.enumvalue_customname) = "MethodTypeShutdown"];
    SURVEY_REQUEST = 4 [(gogoproto.enumvalue_customname) = "MethodTypeSurveyRequest"];
    SURVEY_RESPONSE = 5 [(gogoproto.enumvalue_customname) = "MethodTypeSurveyResponse"];
    SUBSCRIBE = 6 [(gogoproto.enumvalue_customname) = "MethodTypeSubscribe"];
    NOTIFICATION = 7 [(gogoproto.enumvalue_customname) = "MethodTypeNotification"];
}

message Command {
    string uid = 1;
    MethodType method = 2;
    bytes params = 3;
}

message Node {
    string uid = 1;
    string name = 2;
    string version = 3;
    uint32 num_clients = 4;
    uint32 num_users = 5;
    uint32 num_channels = 6;
    uint32 uptime = 7;
    Metrics metrics = 8;
}

message Metrics {
    double interval = 1;
    map<string, double> items = 2;
}

message Subscribe {
    string user = 1;
    string channel = 2;
    bool presence = 3;
    bool join_leave = 4;
    int64 expire_at = 5;
    bool position = 6;
    bool recover = 7;
    bytes channel_info = 8;
    string client = 9;
    bytes data = 10;
    StreamPosition recover_since = 11;
}

message StreamPosition {
    uint64 offset = 1;
    string epoch = 2;
}

message Unsubscribe {
    string channel = 1;
    string user = 2;
    string client = 3;
}

message Disconnect {
    string user = 1;
    repeated string whitelist = 2;
    uint32 code = 3;
    string reason = 4;
    bool reconnect = 5;
}

message SurveyRequest {
    uint64 id = 1;
    string op = 2;
    bytes data = 3;
}

message SurveyResponse {
    uint64 id = 1;
    uint32 code = 2;
    bytes data = 3;
}

message Notification {
    string op = 1;
    bytes data = 2;
}
