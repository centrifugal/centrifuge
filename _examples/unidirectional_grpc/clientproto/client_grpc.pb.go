// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package clientproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CentrifugeClient is the client API for Centrifuge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentrifugeClient interface {
	Consume(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Centrifuge_ConsumeClient, error)
}

type centrifugeClient struct {
	cc grpc.ClientConnInterface
}

func NewCentrifugeClient(cc grpc.ClientConnInterface) CentrifugeClient {
	return &centrifugeClient{cc}
}

func (c *centrifugeClient) Consume(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Centrifuge_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Centrifuge_ServiceDesc.Streams[0], "/protocol.Centrifuge/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &centrifugeConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Centrifuge_ConsumeClient interface {
	Recv() (*StreamData, error)
	grpc.ClientStream
}

type centrifugeConsumeClient struct {
	grpc.ClientStream
}

func (x *centrifugeConsumeClient) Recv() (*StreamData, error) {
	m := new(StreamData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CentrifugeServer is the server API for Centrifuge service.
// All implementations should embed UnimplementedCentrifugeServer
// for forward compatibility
type CentrifugeServer interface {
	Consume(*ConnectRequest, Centrifuge_ConsumeServer) error
}

// UnimplementedCentrifugeServer should be embedded to have forward compatible implementations.
type UnimplementedCentrifugeServer struct {
}

func (UnimplementedCentrifugeServer) Consume(*ConnectRequest, Centrifuge_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}

// UnsafeCentrifugeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentrifugeServer will
// result in compilation errors.
type UnsafeCentrifugeServer interface {
	mustEmbedUnimplementedCentrifugeServer()
}

func RegisterCentrifugeServer(s grpc.ServiceRegistrar, srv CentrifugeServer) {
	s.RegisterService(&Centrifuge_ServiceDesc, srv)
}

func _Centrifuge_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CentrifugeServer).Consume(m, &centrifugeConsumeServer{stream})
}

type Centrifuge_ConsumeServer interface {
	Send(*StreamData) error
	grpc.ServerStream
}

type centrifugeConsumeServer struct {
	grpc.ServerStream
}

func (x *centrifugeConsumeServer) Send(m *StreamData) error {
	return x.ServerStream.SendMsg(m)
}

// Centrifuge_ServiceDesc is the grpc.ServiceDesc for Centrifuge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Centrifuge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Centrifuge",
	HandlerType: (*CentrifugeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _Centrifuge_Consume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client.proto",
}
