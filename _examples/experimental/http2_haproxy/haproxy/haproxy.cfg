global
    log stdout format raw local0 debug
    maxconn 4096
    tune.h2.initial-window-size 65535
    tune.h2.max-concurrent-streams 100

defaults
    log global
    mode http
    option httplog
    option dontlognull
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout tunnel 3600s  # Important for WebSocket connections

# HAProxy stats page
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /
    stats refresh 10s
    stats show-legends
    stats show-node

frontend main_frontend
    # CRITICAL: Only advertise h2 in ALPN to force Chrome to use HTTP/2
    # Chrome sometimes prefers HTTP/1.1 for WebSocket even when h2 is available
    bind *:443 ssl crt /certs/haproxy.pem alpn h2
    mode http

    # Capture headers for logging
    capture request header :protocol len 20
    capture request header Upgrade len 20
    capture request header Sec-Websocket-Key len 30

    log-format "CLIENT=%ci:%cp PROTO=%HV METHOD=%HM PATH=%HP :protocol=%[capture.req.hdr(0)] Upgrade=%[capture.req.hdr(1)] Sec-WS-Key=%[capture.req.hdr(2)] backend=%b/%s status=%ST"

    # ACL to detect WebSocket connections
    acl is_websocket_path path_beg /connection/websocket

    use_backend websocket_backend if is_websocket_path
    # Default to static content backend
    default_backend static_backend

# Backend for WebSocket - uses HTTP/2 to Centrifuge servers
backend websocket_backend
    mode http
    balance roundrobin

    http-reuse always

    # Timeouts for WebSocket connections
    timeout connect 5s
    timeout server 3600s
    timeout tunnel 3600s

    # HAProxy automatically converts HTTP/1.1 WebSocket to HTTP/2 Extended CONNECT (RFC 8441)
    server centrifuge1 centrifuge1:8443 ssl verify none proto h2 alpn h2 sni str(centrifuge1) check-ssl
    server centrifuge2 centrifuge2:8443 ssl verify none proto h2 alpn h2 sni str(centrifuge2) check-ssl
    server centrifuge3 centrifuge3:8443 ssl verify none proto h2 alpn h2 sni str(centrifuge3) check-ssl

# Backend for static content (index.html)
# Also use HTTP/2 since Go backend supports it
backend static_backend
    mode http
    balance roundrobin
    http-reuse safe
    server centrifuge1 centrifuge1:8443 ssl proto h2 alpn h2 ca-file /certs/rootCA.pem sni str(centrifuge1) verify none check-ssl
