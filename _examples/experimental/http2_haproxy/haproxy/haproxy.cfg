global
    log stdout format raw local0 debug
    maxconn 4096
    tune.ssl.default-dh-param 2048
    # Enable HTTP/2 debugging
    tune.h2.initial-window-size 65535
    tune.h2.max-concurrent-streams 100

defaults
    log global
    mode http
    option httplog
    option dontlognull
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout tunnel 3600s  # Important for WebSocket connections

# HAProxy stats page
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /
    stats refresh 10s
    stats show-legends
    stats show-node

# Frontend - accepts both HTTP/2 and HTTP/1.1 from clients
# HTTP/2 for static files, HTTP/1.1 for WebSocket upgrades
frontend websocket_frontend
    bind *:443 ssl crt /certs/haproxy.pem alpn h2,http/1.1
    mode http

    # Logging
    log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

    # ACL to detect WebSocket upgrade
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_path path_beg /connection/websocket

    # Use WebSocket backend for WebSocket connections
    use_backend websocket_backend if is_websocket is_websocket_path

    # Default backend for static files (HTML)
    default_backend static_backend

# Backend for WebSocket - uses HTTP/2 to Centrifuge servers
backend websocket_backend
    mode http
    balance roundrobin

    http-reuse never

    # Timeouts for tunnel/WebSocket connections
    timeout connect 5s
    timeout server 3600s
    timeout tunnel 3600s

    # HTTP/2 backend servers with ALPN h2 negotiation
    # HAProxy 2.4+ automatically converts HTTP/1.1 WebSocket to HTTP/2 Extended CONNECT (RFC 8441)
    # proto h2 forces HTTP/2, sni sends correct hostname
    server centrifuge1 centrifuge1:8443 ssl proto h2 alpn h2 ca-file /certs/rootCA.pem sni str(centrifuge1) verify none check-ssl
    server centrifuge2 centrifuge2:8443 ssl proto h2 alpn h2 ca-file /certs/rootCA.pem sni str(centrifuge2) verify none check-ssl
    server centrifuge3 centrifuge3:8443 ssl proto h2 alpn h2 ca-file /certs/rootCA.pem sni str(centrifuge3) verify none check-ssl

# Backend for static content (index.html)
# Also use HTTP/2 since Go backend supports it
backend static_backend
    mode http
    balance roundrobin
    http-reuse safe
    server centrifuge1 centrifuge1:8443 ssl proto h2 alpn h2 ca-file /certs/rootCA.pem sni str(centrifuge1) verify none check-ssl
